
% \iffalse meta-comment
%
% Copyright (C) 2011 by Enrico Jörns
% -----------------------------------
%
% This file may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.2
% of this license or (at your option) any later version.
% The latest version of this license is in:
%
%   http://www.latex-project.org/lppl.txt
%
% and version 1.2 or later is part of all distributions of LaTeX
% version 1999/12/01 or later.
%
% \fi
%
% \CheckSum{0}
%
% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
% \iffalse
%
%<*driver>
\documentclass{ltxdoc}
\usepackage[ngerman]{babel}
\usepackage[utf8]{inputenc}
\usepackage{nexus}
\usepackage[colorlinks, linkcolor=blue]{hyperref}
\usepackage{tabularx}
\EnableCrossrefs
\CodelineIndex
\RecordChanges
\begin{document}
  \DocInput{tubsbox.dtx}
\end{document}
%</driver>
% \fi
%
%
% \changes{v1.0}{ YYYY / MM / DD }{Initial version}
%
% \GetFileInfo{tubshead.sty}
%
% \DoNotIndex{ list of control sequences }
%
% \title{\textsf{tubsbox} -- 
%   Box-Definitionen für \emph{tubslatex}\thanks{This document
%   corresponds to \textsf{tubsbox}~\fileversion,
%   dated \filedate.}}
% \author{Enrico Jörns \\ \texttt{e dot joerns at tu minus bs dot de}}
%
% \maketitle
%
% \begin{abstract}
%   Diese Datei stellt die Umgebung |\tubsbox| zur Verfügung mit dem
%   eine Box im Gaußraster erstellt werden kann. Für die Breite der Box wird
%   das Spalten-Raster verwendet. Der Textbereich der Boxen wird jeweils korrekt
%   eingerückt.
% \end{abstract}
%
% \section{Benutzung}
%
% \DescribeEnv{tubsbox} Box im Gauß-Raster
%
% Syntax: |\tubsbox|\oarg{options}\marg{}
%
%
% \StopEventually{\PrintIndex}
%
% \section{Implementierung}
%
%
%    \begin{macrocode}
%<*package>
%    \end{macrocode}
%
%    \begin{macrocode}
\RequirePackage{ifthen}
\RequirePackage{xkeyval}
\RequirePackage{tubstypearea}
\RequirePackage[absolute]{textpos}
\RequirePackage{etoolbox}
\RequirePackage{forloop}
%    \end{macrocode}
%
% TODO: gaussbox=gaussbox!?
%    \begin{macrocode}
\newboolean{gaussbox@bottomsender}\setboolean{gaussbox@bottomsender}{false}
%    \end{macrocode}
%
%
% \subsection{Optionen}\label{sec:options}
%
% \paragraph{\ttfamily sender} Mögliche Werte: |bottom| oder |top|.
% Schaltet zwischen den beiden Layoutvarianten mit Absenderbereich oben
% und unten auf der Seite um, damit die Boxen korrekt platziert werden.
%    \begin{macrocode}
\define@key{gaussbox.sty}{sender}{%
  \ifthenelse{\equal{#1}{bottom}}{%
    \setboolean{gaussbox@bottomsender}{true}
  }{%
    \setboolean{gaussbox@bottomsender}{false}
  }
}
%    \end{macrocode}
%
% \paragraph{\ttfamily frame} Zeichnet wenn gewünscht einen Rahmen um
%   die Box. Mögliche Werte: |none| - Kein Rahmen, |fbox| - einfacher Rahmen.
%   Standardmäßig haben die Boxen keinen Rahmen.
%    \begin{macrocode}
\def\gaussbox@box{\relax}
\define@choicekey{gaussbox.sty}{frame}[\val\nr]{none,fbox}[none]{%
  \ifcase\nr\relax
    \def\gaussbox@box{\relax}
  \or
    \def\gaussbox@box{\fbox}
  \fi
}
%    \end{macrocode}
%
% \paragraph{\ttfamily bgcolor} Hintergrundfarbe der Boxen festlegen.
%   Mögliche werte sind |none|, sowie die jeweilige gewünschte Farbe.
%   Standardmäßig haben die Boxen keine Hintergrundfarbe.
%    \begin{macrocode}
\newcommand{\gaussbox@colorbox}{\relax}
\define@key{gaussbox.sty}{bgcolor}[none]{%
  \ifthenelse{\equal{#1}{none}}{%
    \renewcommand\gaussbox@colorbox{\relax}
  }{%
    \def\bgcolor{#1}
    \renewcommand\gaussbox@colorbox{\colorbox{\bgcolor}}
  }
}
%    \end{macrocode}
%
%
%    \begin{macrocode}
\ProcessOptionsX\relax
%    \end{macrocode}
%
%    \begin{macro}{\gaussbox@setorig}
% Berechnet den Ursprung des von den Boxen benutzten Koordinatensystems neu.
%    \begin{macrocode}
% TODO: usage?...
\newcommand\gaussbox@setorig{%
  % TODO: this seems to be a bug, only one borderwidth should be needed
  \ifthenelse{\boolean{gaussbox@bottomsender}}{%
    \textblockorigin{2\tubspage@borderwidth}{%
      2\tubspage@borderwidth}
  }{%
    \textblockorigin{2\tubspage@borderwidth}{%
      \tubspage@senderheight+\tubspage@borderwidth}
  }
}
%    \end{macrocode}
%    \end{macro}
%
%
%    \begin{macro}{\gaussboxsetup}
% Aktualisiert alle durch Optionen übergebenen Einstellungen an den Boxen.
%    \begin{macrocode}
\newcommand{\gaussboxsetup}[1][]{%
  \setkeys{gaussbox.sty}{#1}
  \gaussbox@setorig
}
%    \end{macrocode}
%    \end{macro}
%
% Initialisierung mit Wertden der Paket-Optionen.
%    \begin{macrocode}
\gaussboxsetup % call once to init
%    \end{macrocode}
%
% Lege Rastermaße fest.
%    \begin{macrocode}
\setlength{\TPHorizModule}{%
  (\textwidth)*\ratio{1mm}{\tubspage@xsegments mm}}
\setlength{\TPVertModule}{%
  (\tubspage@communicationheight)*\ratio{1mm}{\value{tubspage@gausssum} mm}}
%    \end{macrocode}
%
% Definition einiger benötigter Längen
%    \begin{macrocode}
\newlength{\gaussbox@leftmargin}
\newlength{\gaussbox@rightmargin}
\newlength{\gaussbox@leftsep}
\newlength{\gaussbox@rightsep}
\newlength{\gaussbox@topmargin}
\newlength{\gaussbox@toppadding}
\newlength{\gaussbox@bottommargin}
\newsavebox{\storebox}
\newsavebox{\scifistorebox}
\newcounter{gaussbox@lastelement}
\newcounter{gaussbox@calcypos}
\newcounter{gaussbox@calcheight}
%    \end{macrocode}
%
%    \begin{macro}{gaussbox}
% \oarg{options}\marg{xpos}\marg{ypos}\marg{widht}\marg{height}
%
% \begin{tabularx}{\textwidth}{lX}
%   |options| & Siehe Abschnit \ref{sec:options}  \\
%   |xpos|    & Horizontaler Startpunt der Box,
%               gemessen im Spalten-Raster,
%               Standard-Wertebereich: [1-6]  \\
%   |ypos|    & Vertikaler Startpunkt der Box,
%               gemessen im Gauß-Raster
%               Standard-Wertebereich: [1-6] (Querformat), [1-8] (Hochformat)\\
%   |width|   & Breite der Box in Spalten,
%               Wertebereich: [1-6] \\
%   |height|  & Höhre der Box in Gaußraster-Elementen,
%               Wertebereich: [1-6] / [1-8]
% \end{tabularx}
%    \begin{macrocode}
\newenvironment{gaussbox}[5][bgcolor=none]{%
\setkeys{gaussbox.sty}{#1}
%    \end{macrocode}
% Berechnung der linken und rechten Ränder
%    \begin{macrocode}
\ifnum#2=0
\setlength{\gaussbox@leftmargin}{\tubspage@borderwidth}
\setlength{\gaussbox@rightmargin}{0mm}
\setlength{\gaussbox@leftsep}{0mm}
\else
\setlength{\gaussbox@leftsep}{0.5\tubspage@columnsep}
\fi
%
\setcounter{gaussbox@lastelement}{#2}\addtocounter{gaussbox@lastelement}{#4}
\ifnum\value{gaussbox@lastelement}=\tubspage@xsegments
  \setlength{\gaussbox@rightmargin}{\tubspage@borderwidth}
  \setlength{\gaussbox@rightsep}{0mm}
\else
  \setlength{\gaussbox@rightmargin}{0mm}
  \setlength{\gaussbox@rightsep}{0.5\tubspage@columnsep}
\fi
%    \end{macrocode}
% Berechnung der oberen und unteren Ränder
%    \begin{macrocode}
\ifnum#3=1
  \setlength{\gaussbox@topmargin}{\tubspage@borderwidth}
  \setlength{\gaussbox@toppadding}{3\tubspage@borderwidth}
  \setlength{\gaussbox@bottommargin}{0mm}
\else
  \setlength{\gaussbox@toppadding}{\tubspage@borderwidth}
\fi
\setcounter{gaussbox@lastelement}{#3+#5-1}
\ifnum\value{gaussbox@lastelement}=\tubspage@ysegments
  \setlength{\gaussbox@bottommargin}{\tubspage@borderwidth}
\else
  \setlength{\gaussbox@bottommargin}{0mm}
\fi
%
\def\gaussbox@xpos{#2}
% Makro |\@inv@arg| wird benutzt, um Argument 'inverted' zu übergeben
\def\@inv@arg{\relax}
\ifthenelse{\boolean{gaussbox@bottomsender}}{%
  \def\@inv@arg{inverted}%
}{}
\calc@gauss@elementpos[\@inv@arg]{gaussbox@calcypos}{#3}
\def\gaussbox@ypos{\thegaussbox@calcypos}
% 
\calc@gauss@elementpos[\@inv@arg]{gaussbox@calcheight}{#3+#5}
\addtocounter{gaussbox@calcheight}{%
  -\thegaussbox@calcypos}
% 
\def\gaussbox@width{#4}
\def\gaussbox@height{\thegaussbox@calcheight}
\begin{lrbox}{\storebox}
\begin{minipage}[t]%
  [\gaussbox@height\TPVertModule]%
  {\gaussbox@width\TPHorizModule-\gaussbox@leftsep-\gaussbox@rightsep}%
  \vspace*{\gaussbox@toppadding}%
}{%
\vspace*{\tubspage@borderwidth}%
\end{minipage}
\end{lrbox}
\setlength{\fboxsep}{0cm}%
\begin{textblock}{\gaussbox@width}(\gaussbox@xpos,\gaussbox@ypos)%
  \hspace*{\gaussbox@leftsep}%
  \hspace*{-\gaussbox@leftmargin}%
  \raisebox{\tubspage@borderwidth}[0cm]{%
    \gaussbox@box{\gaussbox@colorbox{%
      \hspace*{\gaussbox@leftmargin}%
      \usebox{\storebox}%
      \hspace*{\gaussbox@rightmargin}%
      }}%
    }%
  \hspace*{\gaussbox@rightsep}%
\end{textblock}
}
%    \end{macrocode}
%    \end{macro}
%
% NOTE: Nur aus Kompatibilitaetsgründen definiert!
% Sobald wie möglich entfernen!
%    \begin{macrocode}
\let\tubsbox=\gaussbox
\let\endtubsbox=\endgaussbox
\let\tubsboxsetup=\gaussboxsetup
%    \end{macrocode}
%
%
% \subsection{Scientific-Poster-Box}
%
%
%    \begin{macro}{tubs@sb@elementcount}
% Counter zählt Anzahl Zeilen für Box-Layout.
%    \begin{macrocode}
\newcounter{tubs@sb@elementcount}
%    \end{macrocode}
%    \end{macro}
%
%    \begin{macro}{tubs@sb@xcount}
% Counter zählt Anzahl Xen
%    \begin{macrocode}
\newcounter{tubs@sb@xcount}
%    \end{macrocode}
%    \end{macro}
%
%    \begin{macro}{\tubs@sb@xfreespace}
% Länge speichert aktuellen freien Platz für Xe
%    \begin{macrocode}
\newlength{\tubs@sb@xfreespace}
%    \end{macrocode}
%    \end{macro}
%
%    \begin{macro}{\tubs@sb@xlength}
% Länge eines X-Elements
%    \begin{macrocode}
\newlength{\tubs@sb@xlength}
%    \end{macrocode}
%    \end{macro}
%
%    \begin{macro}{tubs@cnt}
% Counter für forloop-Schleife
%    \begin{macrocode}
\newcounter{tubs@cnt}
%    \end{macrocode}
%    \end{macro}
%
%    \begin{macro}{\tubs@sb@setelements}
% \marg{list}\par
% Erwartet als Parameter eine komma-getrennte Liste, deren Elemente
% entweder Längen oder der Buchstabe X ist.
% Elemente mit Buchstaben X teilen den restlichen zur Verfügung stehenden Platz
% gleichmäßig untereinander auf.
%    \begin{macrocode}
\newcommand\tubs@sb@setelements[2]{%
  \setcounter{tubs@sb@elementcount}{0}
  \setcounter{tubs@sb@xcount}{0}
  % Iteriere über Liste
  \let\do\tubs@sb@parsenext
  \docsvlist{#1}
  % X-Länge setzen
  \setlength\tubs@sb@xlength{\tubs@sb@xfreespace/\thetubs@sb@xcount}
  % Iteriere über alle Zeilen und ersetze X-Zeilen durch die entsprechende Länge
  \stepcounter{tubs@sb@elementcount}% only for forloop!
  \forloop[1]{tubs@cnt}{1}{\value{tubs@cnt}<\thetubs@sb@elementcount}{%
    \expandafter\def\expandafter\tubs@sb@current@row\expandafter{%
      \csname tubs@sb@tmplength@\thetubs@cnt\endcsname%
    }
    % Schreibe nun gespeicherte Längen und X-Längen in endgültiges Makro
    \ifthenelse{\equal{\tubs@sb@current@row}{X}}{%
      \expandafter\edef\csname #2\thetubs@cnt\endcsname{%
        \the\tubs@sb@xlength%
      }%
    }{%
      \expandafter\edef\csname #2\thetubs@cnt\endcsname{%
        \tubs@sb@current@row%
      }%
    }
  }
  \addtocounter{tubs@sb@elementcount}{-1}% only for forloop!
}
%    \end{macrocode}
%    \end{macro}
%
%    \begin{macro}{\tubs@sb@setrows}
% \marg{element}\par
% Prüft, ob das übergebene Element ein X ist, ansonsten wird davon
% ausgegangen, dass es sich um eine Länge handelt und es wird versucht
% diese zu speichern.
%    \begin{macrocode}
\newcommand*{\tubs@sb@parsenext}[1]{%
  % Teste, ob X oder Längeneinheit übergeben wurde
  \stepcounter{tubs@sb@elementcount}
  \ifthenelse{\equal{#1}{X}}{% X
    \stepcounter{tubs@sb@xcount}%
    \expandafter\def\csname tubs@sb@tmplength@\thetubs@sb@elementcount\endcsname{X}
  }{% Laenge
    % Ziehe Länge von xfreespace ab und speichere sie.
    \addtolength\tubs@sb@xfreespace{-#1}
    \expandafter\def\csname tubs@sb@tmplength@\thetubs@sb@elementcount\endcsname{%
      #1%
    }
  }
  % Ziehe zusätzlich Stegbreite ab.
  \addtolength{\tubs@sb@xfreespace}{-0.5\tubspage@borderwidth}
}
%    \end{macrocode}
%    \end{macro}
%
%    \begin{environment}{scifiposter}
% \marg{rows}\par
% Extra-Umgebung für wissenschaftliche Poster mit Modulsystem.
% Als Argument ist die gewünschte Anzahl an Modul-Zeilen anzugeben.
% Dies geschieht mit einer durch Kommas getrennten Liste.
% Jedes Element muss dabei entweder eine Längenangabe oder der Buchstabe 'X'
% sein. Jedes Element steht für eine Modul-Zeile und legt gleichzeitig deren
% Höhe fest. Der Buchstabe 'X' sorgt dabei dafür, dass der restliche zur
% Verfügung stehende Platz gleichmäßig auf X-Elemente aufgeteilt wird.
% Die Verwendung von mindestens einem 'X' pro Layout ist sinnvoll, da sonst
% der Darstellungsraum mühsam von Hand auf die richtige Größe gebracht werden 
% muss.\par
% Jede angelegte Modul-Zeile muss dann mit der Umgebung |scifirow| mit Inhalt
% gefüllt werden.\par
% Wertet Argument-Liste aus und speichert ermittelte Längen in Makros mit Präfix
% |tubs@sb@rowlength|.
%    \begin{macrocode}
\newenvironment{scifiposter}[1]{%
  % reset scifirow counter
  \setcounter{tubs@sb@current@row}{0}
  %TODO: length is just a very diry hack, fix this!
  \setlength{\tubs@sb@xfreespace}{\textheight+2.5mm+\tubspage@borderwidth}
  \tubs@sb@setelements{#1}{tubs@sb@rowlength@}
}{%
}
%    \end{macrocode}
%    \end{environment}
%
%    \begin{macro}{tubs@sb@current@col}
%    \begin{macro}{tubs@sb@current@row}
%    \begin{macro}{tubs@sb@current@subrow}
% Zähler für die jeweils aktuell gesetzte Modul-Zeile/-Spalte.
%    \begin{macrocode}
\newcounter{tubs@sb@current@col} % aktuelle Spalte
\newcounter{tubs@sb@current@row} % aktuelle Zeile
\newcounter{tubs@sb@current@subrow}  % aktuelle Subspalte
%    \end{macrocode}
%    \end{macro}\end{macro}\end{macro}
%
%    \begin{environment}{scifirow}
% \oarg{cols}\par
% Umgebung mit der Modulzeilen mit Inhalt gefüllt oder
% zusätzliche Spaltenbereiche angelegt werden können.
% Das optionale Argument \emph{rows} hat dabei dieselbe Funktion wie
% in |scifiposter| beschrieben, allerdings definiert sie nun
% \emph{Spalten}breiten.\par
% Wenn nur eine einzelne (X)-Spalte definiert wurde, kann der Inhalt
% direkt in die Umgebung geschrieben werden,
% ansonsten müssen die einzelnen Spalteninhalte mittels der Umgebung
% |scificol| definiert werden.\par
% Wertet Argument-Liste aus und speichert ermittelte Längen in Makros
% mit Präfix |tubs@sb@collength@|. Wenn nur eine einzelne (X)-Spalte
% definiert wurde, bzw. das optionale Argument leer gelassen, so wird
% direkt eine scifibox erstellt.
%    \begin{macrocode}
\newenvironment{scifirow}[1][X]{%
  % reset scificol counter
  \setcounter{tubs@sb@current@col}{0}
  % Setze Länge auf Textbreite + linker und rechter Rand + Stegkorrektur
  \setlength{\tubs@sb@xfreespace}{\textwidth+1.5\tubspage@borderwidth}
  % Parse Komma-Liste und speichere Längen mit Präfix 'tubs@sb@collength@'
  \tubs@sb@setelements{#1}{tubs@sb@collength@}
  \stepcounter{tubs@sb@current@row}
  % Wenn nur eine Spalte, dann direkt scifibox setzen
  \ifthenelse{\equal{#1}{X}}{%
    \stepcounter{tubs@sb@current@col}
    \expandafter\edef\expandafter\@argI\expandafter{%
      \csname tubs@sb@rowlength@\thetubs@sb@current@row\endcsname}
    \expandafter\edef\expandafter\@argII\expandafter{%
      \csname tubs@sb@collength@\thetubs@sb@current@col\endcsname}
    \def\tubs@sb@box@cmd{\@scifibox{\@argI}{\@argII}}
    \def\tubs@sb@box@endcmd{\end@scifibox}
  }{%
    \def\tubs@sb@box@cmd{\relax}
    \def\tubs@sb@box@endcmd{\relax}
  }
  \tubs@sb@box@cmd%
}{%
  \tubs@sb@box@endcmd%
}
%    \end{macrocode}
%    \end{environment}
%
%    \begin{environment}{scificol}
% \oarg{subrows}\par
% Umgebung mit der Modulspalten mit Inhalt gefüllt oder
% zusätzliche Unterzeilen angelegt werden können.
%    \begin{macrocode}
\newenvironment{scificol}[1][X]{%
  % reset scifisubrow counter
  \setcounter{tubs@sb@current@subrow}{0}
  % Setze Länge auf Zeilenhöhe + Trennstrich
  \expandafter\setlength\expandafter\tubs@sb@xfreespace\expandafter{\csname tubs@sb@rowlength@\thetubs@sb@current@row\endcsname+0.5\tubspage@borderwidth}
  % Parse Komma-Liste und speichere Längen mit Präfix 'tubs@sb@subrowlength@'
  \tubs@sb@setelements{#1}{tubs@sb@subrowlength@}
  \stepcounter{tubs@sb@current@col}
  % Wenn nur eine Spalte, dann direkt scifibox setzen
  \ifthenelse{\equal{#1}{X}}{%
    \stepcounter{tubs@sb@current@subrow}
    \expandafter\edef\expandafter\@argI\expandafter{%
      \csname tubs@sb@subrowlength@\thetubs@sb@current@subrow\endcsname}
    \expandafter\edef\expandafter\@argII\expandafter{%
      \csname tubs@sb@collength@\thetubs@sb@current@col\endcsname}
    \def\tubs@sb@box@cmd{\@scifibox{\@argI}{\@argII}}
    \def\tubs@sb@box@endcmd{\end@scifibox}
  }{%
    \def\tubs@sb@box@cmd{\relax}
    \def\tubs@sb@box@endcmd{\relax}
  }
  \tubs@sb@box@cmd%
}{%
  \tubs@sb@box@endcmd%
}
%    \end{macrocode}
%    \end{environment}
%
%    \begin{environment}{scifisubrow}
% Umgebung mit der Modul-Unterzeilen mit Inhalt gefüllt werden können.
%    \begin{macrocode}
\newenvironment{scifisubrow}{%
  \stepcounter{tubs@sb@current@subrow}
  \expandafter\edef\expandafter\@oarg\expandafter{%
    \csname tubs@sb@rowlength@\thetubs@sb@current@row\endcsname}
  \expandafter\edef\expandafter\@argI\expandafter{%
    \csname tubs@sb@subrowlength@\thetubs@sb@current@subrow\endcsname}
  \expandafter\edef\expandafter\@argII\expandafter{%
    \csname tubs@sb@collength@\thetubs@sb@current@col\endcsname}
  \@scifibox[\@oarg]{\@argI}{\@argII}%
}{%
  \end@scifibox%
}
%    \end{macrocode}
%    \end{environment}
%
%    \begin{macro}{\tubs@sb@box@xpos}
%    \begin{macro}{\tubs@sb@box@ypos}
%    \begin{macro}{\tubs@sb@box@rowheight}
%    \begin{macro}{\tubs@sb@box@splitrow}
% Von |@scifibox| verwendete Längen.
%    \begin{macrocode}
\newlength{\tubs@sb@box@xpos}% x-Position
\newlength{\tubs@sb@box@ypos}% y-Position
\newlength{\tubs@sb@box@rowheight}% Höhe einer Zeile, sofern als opt. Arg. gegeben
\newlength{\tubs@sb@box@splitrow}% Speichert benutze Länge von Splitrow für späteren Reset
%    \end{macrocode}
%    \end{macro}\end{macro}\end{macro}\end{macro}
%
%    \begin{macro}{@scifibox}
% \oarg{rowheight}\marg{height}\marg{width}\par
% Box für Inhalt auf wissenschaftlichen Postern (Modulsystem).
% Dies ist unabhängig vom Gaußraster und hat schmalere Ränder als die gaussbox.
% Das optionale Argument rowheight muss gesetzt werden, wenn in einer Zeile mehrere Boxen untergebracht werden sollen.
%    \begin{macrocode}
\newenvironment{@scifibox}[3][\relax]{%
  % Argumente sichern
  \def\@current@rowheight{#1}
  \def\@current@height{(#2)}%
  \def\@current@width{(#3)}% Breite der weißen Box, ohne Ränder!
  % Speichere Inhalt in minipage-Box.
  \begin{lrbox}{\scifistorebox}%
    \begin{minipage}[t][\@current@height]{\@current@width-\tubspage@borderwidth}%
      \vspace*{0.5\tubspage@borderwidth}%
}{%
      \vspace*{0.5\tubspage@borderwidth}%
    \end{minipage}%
  \end{lrbox}%
% Definiere und platziere Textblock mit gespeichertem Inhalt.
  \begin{textblock*}{\@current@width}(%
    -1\tubspage@borderwidth+\tubs@sb@box@xpos,%
    -1\tubspage@borderwidth+0.05195\paperheight+\tubs@sb@box@ypos)%
      \setlength\fboxsep{0mm}%
      \colorbox{tuWhite}{%
        \hspace{0.5\tubspage@borderwidth}%
        \usebox{\scifistorebox}%
        \hspace{0.5\tubspage@borderwidth}%
      }%
  \end{textblock*}%
  % Prüfe, ob Zeile gesplittet werden soll (opt. Arg. != \relax)
  \ifthenelse{\equal{\@current@rowheight}{\relax}}{%
    \addtolength\tubs@sb@box@xpos{\@current@width+0.5\tubspage@borderwidth}%
  }{%
    \setlength\tubs@sb@box@rowheight{\@current@rowheight}
    \addtolength\tubs@sb@box@ypos{\@current@height+0.5\tubspage@borderwidth}%
    \addtolength\tubs@sb@box@splitrow{\@current@height+0.5\tubspage@borderwidth}%
    % Wenn Zeilenhöhe ausgefüllt, normal weiter machen...
    \ifthenelse{\lengthtest{\tubs@sb@box@splitrow > \tubs@sb@box@rowheight}}{%
      \addtolength\tubs@sb@box@xpos{\@current@width+0.5\tubspage@borderwidth}%
      \addtolength\tubs@sb@box@ypos{-\tubs@sb@box@splitrow}%
      \setlength\tubs@sb@box@splitrow{0mm}%
    }{}
  }
  % Wenn Zeile gefüllt ist, springen in nächste Zeile
  \ifthenelse{\lengthtest{\tubs@sb@box@xpos > \textwidth}}{%
    \addtolength\tubs@sb@box@ypos{\@current@height+0.5\tubspage@borderwidth}%
    \setlength\tubs@sb@box@xpos{0mm}%
    % Wenn darüber hinaus Seite gefüllt ist, fange neue an!
    \ifthenelse{\lengthtest{\tubs@sb@box@ypos > \textheight}}{%
      \setlength\tubs@sb@box@ypos{0mm}%
    }{}
  }{}
  % speichere global!
  \global\tubs@sb@box@xpos=\tubs@sb@box@xpos%
  \global\tubs@sb@box@ypos=\tubs@sb@box@ypos%
  \global\tubs@sb@box@splitrow=\tubs@sb@box@splitrow%
}
%    \end{macrocode}
%    \end{macro}
%
%    \begin{macrocode}
%</package>
%    \end{macrocode}
%
% \Finale
\endinput
%
% Präfixe:
% tubs  - allgemeiner Präfix
% gb    - Präfix für gaussbox
% sb    - Präfix für scifibox
%